diff --git a/common/autoboot.c b/common/autoboot.c
index 5d331991c19..6b0fda4d6dd 100644
--- a/common/autoboot.c
+++ b/common/autoboot.c
@@ -25,6 +25,7 @@
 #include <bootcount.h>
 #include <crypt.h>
 #include <dm/ofnode.h>
+#include <asm/gpio.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -38,6 +39,290 @@ DECLARE_GLOBAL_DATA_PTR;
 
 /* Stored value of bootdelay, used by autoboot_command() */
 static int stored_bootdelay;
+
+
+#if defined(CONFIG_RECOVERY_KEY) && defined(CONFIG_BOARD_LATE_INIT)
+static int recovery_key_check(void)
+{
+	int val = 1; // defaultis high, press is low
+	int delay = CONFIG_RECOVERY_KEY_DELAY;
+	unsigned long ts;
+
+	if (gpio_request(CONFIG_RECOVERY_KEY_GPIO, "recoverykey")) {
+		printf("request gpio %d failed!\n", CONFIG_RECOVERY_KEY_GPIO);
+		return 0;
+	}
+
+	gpio_direction_input(CONFIG_RECOVERY_KEY_GPIO);
+	val = gpio_get_value(CONFIG_RECOVERY_KEY_GPIO);
+
+	while ((delay > 0) && (!val))
+	{
+		--delay;
+		/// delay 1000 ms
+		ts = get_timer(0);
+		do {
+			val = gpio_get_value(CONFIG_RECOVERY_KEY_GPIO);
+			udelay(10000);
+		} while (!val && get_timer(ts) < 1000);
+	}
+
+	if (!val) {
+		env_set("recovery_key", "y");
+		env_set("recovery_mode", "recovery_mode=key"); // key or file
+	}
+
+	gpio_free(CONFIG_RECOVERY_KEY_GPIO);
+	return !val;
+}
+#else
+static int recovery_key_check(void)
+{
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_BOOT_MMC_DEV_0) || defined(CONFIG_BOOT_MMC_DEV_1)
+static int advupdate(const char *ifname, const char *dev_part, const char *s)
+{
+	int ret = 0;
+	char buf[256] = {0};
+	bool haveconfig = true;
+	bool haveupdatebin = true;
+
+	//start usb device
+	if (!strcmp(ifname, "usb"))
+	{
+		run_command("usb start", 0);
+
+		//load config file
+		env_set_ulong("filesize", 0);
+		sprintf(buf, "fatload %s %s ${loadaddr} ${advufile};env import -t ${loadaddr} ${filesize}", ifname, dev_part);
+		run_command_list(buf, -1, 0);
+		if (env_get_ulong("filesize", 16, 0) == 0) {
+			memset(buf, 0, sizeof(buf));
+			sprintf(buf, "load %s %s ${loadaddr} ${advufile};env import -t ${loadaddr} ${filesize}", ifname, dev_part);
+			run_command_list(buf, -1, 0);
+			if (env_get_ulong("filesize", 16, 0) == 0) {
+				// config file not found!
+				//printf("%s %s config file not found!\n", ifname, dev_part);
+				haveconfig = false;
+			}
+		}
+
+		// find update.bin file
+		if (!haveconfig)
+		{
+			memset(buf, 0, sizeof(buf));
+			sprintf(buf, "if test -e %s %s update.bin; then setenv advupdatebin y; fi", ifname, dev_part);
+			run_command_list(buf, -1, 0);
+			if (env_get_yesno("advupdatebin") != 1)
+			{
+				// update.bin file not found!
+				//printf("%s %s update.bin file not found!\n", ifname, dev_part);
+				haveupdatebin = false;
+			}
+		}
+
+		// check recovery key press
+		if (!haveupdatebin)
+		{
+			if (env_get_yesno("recovery_key") != 1)
+			{
+				//printf("%s recovery key don't press!\n", ifname);
+				return 0;
+			}
+		}
+	}
+	else if (!strcmp(ifname, "mmc"))
+	{
+		//load config file
+		env_set_ulong("filesize",0);
+		sprintf(buf, "fatload %s %s ${loadaddr} ${advufile};env import -t ${loadaddr} ${filesize}", ifname, dev_part);
+		run_command_list(buf, -1, 0);
+		if (env_get_ulong("filesize", 16, 0) == 0) {
+			memset(buf, 0, sizeof(buf));
+			sprintf(buf, "load %s %s ${loadaddr} ${advufile};env import -t ${loadaddr} ${filesize}", ifname, dev_part);
+			run_command_list(buf, -1, 0);
+			if (env_get_ulong("filesize", 16, 0) == 0) {
+				// config file not found!
+				//printf("%s %s config file not found!\n", ifname, dev_part);
+				haveconfig = false;
+			}
+		}
+
+		// find update.bin file
+		if (!haveconfig)
+		{
+			memset(buf, 0, sizeof(buf));
+			sprintf(buf, "if test -e %s %s update.bin; then setenv advupdatebin y; fi", ifname, dev_part);
+			run_command_list(buf, -1, 0);
+			if (env_get_yesno("advupdatebin") != 1)
+			{
+				// update.bin file not found!
+				//printf("%s %s update.bin file not found!\n", ifname, dev_part);
+				haveupdatebin = false;
+			}
+		}
+
+		// check recovery key press
+		if (!haveupdatebin)
+		{
+			if (env_get_yesno("recovery_key") != 1)
+			{
+				//printf("%s recovery key don't press!\n", ifname);
+				return 0;
+			}
+		}
+	}
+	else if (!strcmp(ifname, "nand"))
+	{
+		memset(buf, 0, sizeof(buf));
+		sprintf(buf, "ubi part NAND.recovery && ubifsmount ubi0;ubifsload ${loadaddr} ${advufile};env import -t ${loadaddr} ${filesize}");
+		run_command_list(buf, -1, 0);
+		run_command_list("ubifsumount", -1, 0);
+		if (env_get_ulong("filesize", 16, 0) == 0) {
+			// config file not found!
+			//printf("nand config file not found!!\n");
+			haveconfig = false;
+		}
+
+		// find update.bin file
+		if (!haveconfig)
+		{
+			memset(buf, 0, sizeof(buf));
+			sprintf(buf, "ubi part NAND.recovery && ubifsmount ubi0;ubifsload ${loadaddr} update.bin 0x10;env import -t ${loadaddr} 0x10");
+			run_command_list(buf, -1, 0);
+			run_command_list("ubifsumount", -1, 0);
+			if (env_get_ulong("filesize", 16, 0) == 0)
+			{
+				// update.bin file not found!
+				//printf("nand update bin file not found!!\n");
+				return 0;
+			}
+			else
+			{
+				run_command("setenv advupdatebin y", 0);
+			}
+		}
+	}
+
+	if (haveconfig)
+		printf("Config file found!\n");
+	else if (env_get_yesno("advupdatebin") == 1)
+		printf("update.bin file found!\n");
+	else if (env_get_yesno("recovery_key") == 1)
+		printf("recovery key pressed!\n");
+	else
+	{
+		printf("Normal boot mode!\n");
+		return 0;
+	}
+
+	if ((env_get_ulong("filesize",16,0) > 0) || (env_get_yesno("advupdatebin") == 1) || (env_get_yesno("recovery_key") == 1))
+	{
+		// ramdisk boot
+		if ((env_get_yesno("advimage") == 1) || (env_get_yesno("advrootfs") == 1) || (env_get_yesno("advrecover") == 1) || (env_get_yesno("advupdatebin") == 1) || (env_get_yesno("recovery_key") == 1))
+		{
+			ret = 2;
+			printf("\n================Enter Recovery Mode!================\n\n");
+			if (!strcmp(ifname, "mmc"))
+			{
+#if defined(CONFIG_BOOT_MMC_DEV_0)
+				if (env_get_yesno("advupdatebin") == 1)
+				{
+					run_command("setenv mmcdev 0", 0);
+					run_command("setenv mmcpart 3", 0);
+				}
+				else
+				{
+					if (!strcmp(dev_part, "1:1")) // SD
+					{
+						run_command("setenv mmcdev 1", 0);
+						run_command("setenv mmcpart 1", 0);
+					}
+					else if (!strcmp(dev_part, "0:3")) // emmc
+					{
+						run_command("setenv mmcdev 0", 0);
+						run_command("setenv mmcpart 3", 0);
+					}
+				}
+#elif defined(CONFIG_BOOT_MMC_DEV_1)
+				if (env_get_yesno("advupdatebin") == 1)
+				{
+					run_command("setenv mmcdev 1", 0);
+					run_command("setenv mmcpart 3", 0);
+				}
+				else
+				{
+					if (!strcmp(dev_part, "0:1"))
+					{
+						run_command("setenv mmcdev 0", 0);
+						run_command("setenv mmcpart 1", 0);
+					}
+					else if (!strcmp(dev_part, "1:3"))
+					{
+						run_command("setenv mmcdev 1", 0);
+						run_command("setenv mmcpart 3", 0);
+					}
+				}
+#else // default is CONFIG_BOOT_MMC_DEV_0
+				if (env_get_yesno("advupdatebin") == 1)
+				{
+					run_command("setenv mmcdev 0", 0);
+					run_command("setenv mmcpart 3", 0);
+				}
+				else
+				{
+					if (!strcmp(dev_part, "1:1"))
+					{
+						run_command("setenv mmcdev 1", 0);
+						run_command("setenv mmcpart 1", 0);
+					}
+					else if (!strcmp(dev_part, "0:3"))
+					{
+						run_command("setenv mmcdev 0", 0);
+						run_command("setenv mmcpart 3", 0);
+					}
+				}
+#endif
+				run_command("mmc dev ${mmcdev}", 0);
+
+				s = env_get("advrfs");
+				run_command_list(s, -1, 0);
+			}
+			else if (!strcmp(ifname, "usb"))
+			{
+				s = env_get("advusbrfs");
+				run_command_list(s, -1, 0);
+			}
+			else if (!strcmp(ifname, "nand"))
+			{
+				if (env_get_yesno("advupdatebin") == 1)
+				{
+					s = env_get("nandrd_boot_oldimage");
+					run_command_list(s, -1, 0);
+				}
+				else
+				{
+					s = env_get("nandrd_boot");
+					run_command_list(s, -1, 0);
+				}
+			}
+		}
+		else
+		{
+			printf("System boot mode!\n");
+			s = env_get("bootcmd");
+		}
+	}
+	else
+		printf("Normal boot mode!!\n");
+
+	return ret;
+}
+#endif
+
 static int menukey;
 
 #if defined(CONFIG_AUTOBOOT_STOP_STR_CRYPT)
@@ -498,6 +783,51 @@ void autoboot_command(const char *s)
 		if (lock)
 			prev = disable_ctrlc(1); /* disable Ctrl-C checking */
 
+#if defined(CONFIG_BOOT_MMC_DEV_0)
+		{
+		int ret = 0;
+
+		ret = advupdate("usb", "0:1", s);
+		if (!ret)
+		{
+			ret = advupdate("mmc", "1:1", s); // SD boot
+			if (!ret)
+			{
+				ret = advupdate("mmc", "0:3", s); // emmc recovery
+				if (!ret)
+				{
+					ret = recovery_key_check();
+					if (ret)
+					{
+						ret = advupdate("mmc", "0:3", s); // emmc recovery
+					}
+				}
+			}
+		}
+		}
+#elif defined(CONFIG_BOOT_MMC_DEV_1)
+		{
+		int ret = 0;
+
+		ret = advupdate("usb", "0:1", s);
+		if (!ret)
+		{
+			ret = advupdate("mmc", "0:1", s); // SD boot
+			if (!ret)
+			{
+				ret = advupdate("mmc", "1:3", s);
+				if (!ret)
+				{
+					ret = recovery_key_check();
+					if (ret)
+					{
+						ret = advupdate("mmc", "1:3", s); // emmc recovery
+					}
+				}
+			}
+		}
+		}
+#endif
 		run_command_list(s, -1, 0);
 
 		if (lock)
diff --git a/configs/j722s_evm_a53_defconfig b/configs/j722s_evm_a53_defconfig
index ea4bb06ff5e..cfd351b052b 100644
--- a/configs/j722s_evm_a53_defconfig
+++ b/configs/j722s_evm_a53_defconfig
@@ -11,6 +11,14 @@ CONFIG_TARGET_J722S_A53_EVM=y
 CONFIG_HAS_CUSTOM_SYS_INIT_SP_ADDR=y
 CONFIG_CUSTOM_SYS_INIT_SP_ADDR=0x80480000
 CONFIG_SF_DEFAULT_SPEED=25000000
+CONFIG_BOOTDELAY=1
+CONFIG_AUTOBOOT_KEYED=y
+CONFIG_AUTOBOOT_PROMPT="Press ENTER to stop autoboot in %d seconds\n"
+CONFIG_AUTOBOOT_STOP_STR="\x0d"
+CONFIG_BOOT_MMC_DEV_0=y
+CONFIG_RECOVERY_KEY=y
+CONFIG_RECOVERY_KEY_GPIO=3
+CONFIG_RECOVERY_KEY_DELAY=2
 CONFIG_ENV_SIZE=0x40000
 CONFIG_DM_GPIO=y
 CONFIG_SPL_DM_SPI=y
@@ -31,6 +39,7 @@ CONFIG_SPL_LOAD_FIT_ADDRESS=0x81000000
 CONFIG_BOOTSTD_FULL=y
 CONFIG_BOOTSTD_DEFAULTS=y
 CONFIG_BOARD_LATE_INIT=y
+CONFIG_BOOTCOMMAND="run envboot; run bsp_bootcmd;"
 CONFIG_SPL_MAX_SIZE=0x58000
 CONFIG_SPL_PAD_TO=0x0
 CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
@@ -64,6 +73,7 @@ CONFIG_CMD_CLK=y
 CONFIG_CMD_DFU=y
 CONFIG_CMD_DM=y
 CONFIG_CMD_GPIO=y
+CONFIG_CMD_GPIO_READ=y
 CONFIG_CMD_GPT=y
 CONFIG_CMD_I2C=y
 CONFIG_CMD_MMC=y
-- 
2.34.1


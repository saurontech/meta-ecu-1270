From e6b1ae390312a91c6aa6d1adbc222b90747c3cf1 Mon Sep 17 00:00:00 2001
From: kellyliAdv <kelly.li@advantech.com.tw>
Date: Wed, 8 Oct 2025 15:10:21 +0800
Subject: [PATCH] rauc_default_env_and_mmcdev

Signed-off-by: kellyliAdv <kelly.li@advantech.com.tw>
---
 arch/arm/include/asm/handoff.h |   1 +
 arch/arm/mach-k3/common.c      |  10 ++
 board/ti/j722s/evm.c           |  40 ++++++++
 include/configs/j722s_evm.h    | 164 ++++++++++++++-------------------
 4 files changed, 122 insertions(+), 93 deletions(-)

diff --git a/arch/arm/include/asm/handoff.h b/arch/arm/include/asm/handoff.h
index 0790d2ab1e2..cf1e90fb438 100644
--- a/arch/arm/include/asm/handoff.h
+++ b/arch/arm/include/asm/handoff.h
@@ -16,6 +16,7 @@
  */
 struct arch_spl_handoff {
 	ulong usable_ram_top;
+	u32 boot_device;
 };
 
 #endif
diff --git a/arch/arm/mach-k3/common.c b/arch/arm/mach-k3/common.c
index a371b002863..7153a423327 100644
--- a/arch/arm/mach-k3/common.c
+++ b/arch/arm/mach-k3/common.c
@@ -725,3 +725,13 @@ void setup_qos(void)
 		writel(qos_data[i].val, (uintptr_t)qos_data[i].reg);
 }
 #endif
+
+#if CONFIG_IS_ENABLED(HANDOFF)
+int handoff_arch_save(struct spl_handoff *ho)
+{
+	ho->arch.boot_device = spl_boot_device();
+	printf("Current boot device id is 0x%x\n",spl_boot_device());
+	return 0;
+}
+#endif
+
diff --git a/board/ti/j722s/evm.c b/board/ti/j722s/evm.c
index 47722710212..4d7f00b1b90 100644
--- a/board/ti/j722s/evm.c
+++ b/board/ti/j722s/evm.c
@@ -74,6 +74,46 @@ int board_late_init(void)
 {
 	ti_set_fdt_env(NULL, NULL);
 
+#if CONFIG_IS_ENABLED(HANDOFF)
+	/* Read peripheral SPL was loaded from */
+	if (gd->spl_handoff) {
+		switch (gd->spl_handoff->arch.boot_device) {
+			case BOOT_DEVICE_MMC1:
+				printf("[uboot] Current boot device id is %x\n",gd->spl_handoff->arch.boot_device);
+				env_set("mmcdev", "0");
+				break;
+			case BOOT_DEVICE_MMC2:
+				printf("[uboot] Current boot device id is %x\n",gd->spl_handoff->arch.boot_device);
+				env_set("mmcdev", "1");
+				break;
+			default:
+				break;
+		}
+	}
+#endif	
 	return 0;
 }
 #endif
+
+int mmc_get_env_dev(void)
+{
+	int mmcdev = 0;
+#if CONFIG_IS_ENABLED(HANDOFF)
+	/* Read peripheral SPL was loaded from */
+	if (gd->spl_handoff) {
+		switch (gd->spl_handoff->arch.boot_device) {
+			case BOOT_DEVICE_MMC1:
+				printf("[uboot] Current boot device id is %x\n",gd->spl_handoff->arch.boot_device);
+				mmcdev = 0;
+				break;
+			case BOOT_DEVICE_MMC2:
+				printf("[uboot] Current boot device id is %x\n",gd->spl_handoff->arch.boot_device);
+				mmcdev = 1;
+				break;
+			default:
+				break;
+		}
+	}
+#endif
+	return mmcdev;
+}
diff --git a/include/configs/j722s_evm.h b/include/configs/j722s_evm.h
index bf509d30052..c7c86a475c7 100644
--- a/include/configs/j722s_evm.h
+++ b/include/configs/j722s_evm.h
@@ -11,103 +11,81 @@
 /* Now for the remaining common defines */
 #include <configs/ti_armv7_common.h>
 
-#define FDTFILE_DEFAULT		"k3-j722s-ecu1270.dtb"
+#define FITIMAGEFILE_DEFAULT        "conf-ti_k3-j722s-ecu1270.dtb"
 
 /* Initial environment variables */
-#define CFG_EXTRA_ENV_SETTINGS          \
-	"boot=mmc\0" 						\
-	"mmcdev=0\0"						\
-	"bootpart=0:1\0"					\
-	"bootdir=\0"						\
-	"fdt_file="FDTFILE_DEFAULT"\0" 		\
-	"get_overlay_adv=fdt address ${fdt_addr_r}; fdt resize 0x100000; for overlay in $name_overlays; do; load mmc ${bootpart} ${dtboaddr} ${bootdir}/${overlay} && fdt apply ${dtboaddr}; done;\0" \
-	"get_fdt_adv=load mmc ${bootpart} ${fdt_addr_r} ${fdt_file}\0" \
-	"get_kern_adv=load mmc ${bootpart} ${loadaddr} ${name_kern}\0" \
-	"get_fit_adv=load mmc ${bootpart} ${addr_fit} ${name_fit}\0" \
-	"mmc_args=setenv bootargs console=${console} ${optargs} root=${mmcroot} rw rootfstype=${mmcrootfstype};\0" \
-	"mmc_loados=" \
-		"if test ${boot_fit} -eq 1; then " \
-			"run get_fit_adv; run get_fit_overlaystring; run run_fit; " \
-		"else " \
-			"run get_kern_adv; run get_fdt_adv; run get_overlay_adv; run run_kern; " \
-		"fi\0" \
-	"mmc_boot=echo Booting from mmc ...; setenv mmcdev 1; setenv bootpart 1:1; setenv mmcroot /dev/mmcblk1p2; " \
-		"setenv fdtfile ${fdt_file}; " \
-		"run mmc_args; " \
-		"mmc dev ${mmcdev}; " \
-		"setenv devnum ${mmcdev}; " \
-		"setenv devtype mmc; " \
-		"run mmc_loados\0" \
-    "emmc_boot=echo Booting from emmc ...; setenv mmcdev 0; setenv bootpart 0:1; setenv mmcroot /dev/mmcblk0p2; " \
-		"setenv fdtfile ${fdt_file}; " \
-		"run mmc_args; " \
-		"mmc dev ${mmcdev}; " \
-		"setenv devnum ${mmcdev}; " \
-		"setenv devtype mmc; " \
-		"run mmc_loados;\0" \
-	"advufile=advupdate.txt\0" \
-	"ramrootfstype=ext2 rootwait\0" \
-	"loadramdisk=load mmc ${mmcdev} ${ramdisk_addr_r} ramdisk.gz\0" \
-	"loadusbimage=load usb ${usbdev}:${usbpart} ${loadaddr} ${name_kern}\0" \
-	"loadusbfdt=load usb ${usbdev}:${usbpart} ${fdt_addr_r} ${fdt_file}\0" \
-	"loadusbramdisk=load usb ${usbdev}:${usbpart} ${ramdisk_addr_r} ramdisk.gz\0" \
-	"advrargs=setenv bootargs console=${console} " \
-		"${optargs} " \
-		"root=/dev/ram0 rw ramdisk_size=65536 "\
-		"initrd=${ramdisk_addr_r},64M " \
-		"rootfstype=${ramrootfstype}\0" \
-	"advrfs=echo Advantech recovery file system ramdisk ...; " \
-		"setenv devnum ${mmcdev}; " \
-		"setenv devtype mmc; " \
-		"setenv bootpart ${mmcdev}:${mmcpart}; " \
-		"setenv fdtfile ${fdt_file}; " \
-		"run get_kern_adv; " \
-		"run loadramdisk; " \
-		"run advrargs; " \
-		"if run get_fdt_adv; then " \
-			"booti ${loadaddr} - ${fdt_addr_r}; " \
-		"else " \
-			"booti ${loadaddr};" \
-		"fi;\0" \
-	"advusbrfs=echo Advantech Recovery System ...; " \
-		"usb start; " \
-		"setenv usbdev 0; " \
-		"setenv usbpart 1; " \
-		"setenv devtype usb; " \
-		"run advrargs; " \
-		"run loadusbimage; " \
-		"run loadusbramdisk; " \
-		"if run loadusbfdt; then " \
-			"booti ${kernel_addr_r} - ${fdt_addr_r}; " \
-		"else " \
-			"echo advusbrfs load image/fdt file failed!; " \
-		"fi\0" \
-	"get_fdt_file=" \
-	    "if gpio input gpio@600000_51; then " \
-	        "if gpio input gpio@600000_50; then " \
-                "setenv board_id_3_2 00; " \
-            "else " \
-                "setenv board_id_3_2 01; " \
-            "fi; " \
+
+#define CFG_RAUC_SCRIPT_SETTINGS \
+    "BOOT_ORDER=system0 system1\0" \
+    "BOOT_system0_LEFT=3\0" \
+    "BOOT_system1_LEFT=3\0" \
+    \
+    "select_rauc_mmcpart=" \
+        "setenv mmcpart;" \
+        "setenv RAUC_SLOT;" \
+        "for BOOT_SLOT in ${BOOT_ORDER}; do " \
+            "if test x${mmcpart} != x; then " \
+                "echo 'skip remaining slots';" \
+            "elif test x${BOOT_SLOT} = xsystem0; then " \
+                "if test 0x${BOOT_system0_LEFT} -gt 0; then " \
+                    "echo 'Checking if system0 exists...';" \
+                    "if ext4ls mmc ${mmcdev}:2 /; then " \
+                        "echo 'Found valid slot system0, ${BOOT_system0_LEFT} attempts remaining';" \
+                        "setexpr BOOT_system0_LEFT ${BOOT_system0_LEFT} - 1;" \
+                        "setenv mmcpart 2;" \
+                        "setenv RAUC_SLOT system0;" \
+                    "else " \
+                        "echo 'system0 not found, skipping';" \
+                    "fi;" \
+                "fi;" \
+            "elif test x${BOOT_SLOT} = xsystem1; then " \
+                "if test 0x${BOOT_system1_LEFT} -gt 0; then " \
+                    "echo 'Checking if system1 exists...';" \
+                    "if ext4ls mmc ${mmcdev}:3 /; then " \
+                        "echo 'Found valid slot system1, ${BOOT_system1_LEFT} attempts remaining';" \
+                        "setexpr BOOT_system1_LEFT ${BOOT_system1_LEFT} - 1;" \
+                        "setenv mmcpart 3;" \
+                        "setenv RAUC_SLOT system1;" \
+                    "else " \
+                        "echo 'system1 not found, skipping';" \
+                    "fi;" \
+                "fi;" \
+            "fi;" \
+        "done;\0" \
+	"set_rauc_args_mmc=" \
+        "if test -n ${mmcpart}; then " \
+            "setenv args_mmc 'setenv bootargs console=${console} root=/dev/mmcblk${mmcdev}p${mmcpart} rauc.slot=${RAUC_SLOT} rw rootfstype=ext4 rootwait; saveenv';" \
+            "saveenv;" \
         "else " \
-            "if gpio input gpio@600000_50; then " \
-                "setenv board_id_3_2 10; " \
-                "setenv fdt_file k3-j722s-ecu1270-dio.dtb; " \
-            "else " \
-                "setenv board_id_3_2 11; " \
-            "fi; " \
-		"fi;\0" \
-	"bsp_bootcmd=echo Running BSP bootcmd ...; " \
-		"mmc dev ${mmcdev}; " \
-		"if mmc rescan; then " \
-			"run get_fdt_file; " \
-			"if run get_kern_adv; then " \
-				"run emmc_boot; " \
-			"else " \
-				"run mmc_boot; " \
-			"fi; " \
-		"fi;\0"
+            "echo 'No valid slot found, resetting tries to 3';" \
+            "setenv BOOT_system0_LEFT 3;" \
+            "setenv BOOT_system1_LEFT 3;" \
+            "saveenv;" \
+            "reset;" \
+        "fi\0" \
+    "rauc_bootcmd=" \
+        "echo 'Running RAUC bootcmd ...'; " \
+        "run select_rauc_mmcpart;" \
+		"printenv mmcpart;" \
+		"printenv BOOT_system0_LEFT;" \
+		"printenv BOOT_system1_LEFT;" \
+		"run set_rauc_args_mmc;" \
+        "echo 'Starting kernel fitImage';" \
+        "printenv args_mmc;" \
+        "run args_mmc;" \
+        "printenv loadfitimage;" \
+        "run loadfitimage;\0"        
+    
+#define CFG_RAUC_ENV_SETTINGS \
+    "name_fit_config="FITIMAGEFILE_DEFAULT"\0" \
+    "loadfitimage=ext4load mmc ${mmcdev}:${mmcpart} ${addr_fit} boot/${name_fit};bootm ${addr_fit}#${name_fit_config}\0"
+
+
+#define CFG_EXTRA_ENV_SETTINGS          \
+        CFG_RAUC_ENV_SETTINGS \
+        CFG_RAUC_SCRIPT_SETTINGS
 
 #define CONFIG_SYS_USB_FAT_BOOT_PARTITION 1
 
 #endif /* __CONFIG_J722S_EVM_H */
+
